  -- http://fidytek.pl/bazy_danych/bd_zbior_zadan/sql_zbior.pdf --

--1.1 select * from pracownik; 
--1.2 select imie from pracownik; 
--1.3 select imie,nazwisko,dzial from pracownik; 
--2.1 select imie,nazwisko,pensja from pracownik order by pensja desc; 
--2.2 select imie,nazwisko,pensja from pracownik order by nazwisko,imie; 
--2.3 select nazwisko,dzial,stanowisko from pracownik order by dzial asc imie desc; 
--3.1 select distinct dzial from pracownik; 
--3.2 select distinct dzial,stanowisko from pracownik; 
--3.3 select distinct dzial,stanowisko from pracownik order by dzial,stanowisko desc; 
--4.1 select imie,nazwisko from pracownik where imie='jan'; 
--4.2 select imie,nazwisko from pracownik where stanowisko='sprzedawca'; 
--4.3 select imie,nazwisko,pensja from pracownik where pensja>1500 order by pensja desc; 
--5.1 select imie,nazwisko,dzial,stanowisko from pracownik where dzial='obsluga klienta' and stanowisko='sprzedawca'; 
--5.2 select imie,nazwisko,dzial,stanowisko from pracownik where dzial='techniczny' and stanowisko='kierownik' or stanowisko='sprzedawca'; 
--5.3 select marka from samochod where marka!='fiat' and marka!='ford'; 
--6.1 select * from samochod where marka in('mercedes','seat','opel'); 
--6.2 select imie,nazwisko,data_zatr from pracownik where imie in('anna','marzena','alicja'); 
--6.3 select imie,nazwisko,miasto from klient where miasto not in('warszawa','wroclaw'); 
--7.1 select imie,nazwisko from klient where nazwisko like '%k%'; 
--7.2 select imie,nazwisko from klient where nazwisko like 'D%ski'; 
--7.3 select imie,nazwisko from klient where nazwisko like '_O%' 
--8.1 select * from samochod where poj_silnika between 1100 and 1600; 
--8.2 select * from pracownik where data_zatr between '1997-01-01' and '1997-31-12'; 
--8.3 select * from samochod where przebieg between 10000 and 20000 or przebieg between 30000 and 40000; 
--9.1 select * from pracownik where dodatek is null; 
--9.2 select * from klient where nr_karty_kredyt is not null; 
--9.3 SELECT imie, nazwisko, COALESCE(dodatek,0) FROM pracownik;
--10.1 select imie,nazwisko,pensja,dodatek,pensja+coalesce(dodatek,0) as do_zaplaty from pracownik; 
--10.2 select imie,nazwisko,pensja+coalesce(pensja,50) as nowa_pensja from pracownik; 
--10.3 select imie,nazwisko,(pensja+coalesce(dodatek,0))/100 as jeden_procent from pracownik order by jeden_procent; 
--11.1 select top 1 k.imie,k.nazwisko from klient k JOIN wypozyczenie w ON k.id_klient=w.id_klient order by w.data_wyp ASC; 
--11.2 select top 5 k.imie,k.nazwisko from pracownik k order by k.nazwisko,k.imie; 
--11.3 select top 1 * from wypozyczenie w order by w.data_wyp desc; 
--12.1 select imie,nazwisko,data_zatr from pracownik where MONTH(data_zatr)=5 order by nazwisko asc,imie asc; 
--12.2 select imie,nazwisko,DATEDIFF(DAY,data_zatr,GETDATE()) as ilosc_dni from pracownik order by DATEDIFF(DAY,data_zatr,GETDATE()) desc; 
--12.3 select marka,typ,DATEDIFF(YEAR,data_prod,GETDATE()) as ilosc_lat from samochod order by DATEDIFF(year,data_prod,getdate())desc; 
--13.1 SELECT imie, nazwisko, LEFT(imie,1)+'. '+LEFT(nazwisko,1)+'.' AS inicjaly FROM klient ORDER BY inicjaly, nazwisko, imie; 
--13.2 
--13.3 l
--14.1 UPDATE pracownik SET dodatek=50 WHERE dodatek IS NULL; 
--14.2 UPDATE klient set imie='Jerzy', nazwisko='Nowak' where id_klient=10; 
--14.3 update pracownik set dodatek=100+dodatek where pensja<1500; 
--15.1 DELETE FROM klient WHERE id_klient=17; 
--15.2 DELETE from wypozyczenie where id_klient=17; 
--15.3 delete from samochod where przebieg>60000; 
--16.1 INSERT INTO klient (id_klient,imie,nazwisko,ulica,numer,kod,miasto,telefon) VALUES(121,'Adam','Cichy','Korzenna','12','00-950','Warszawa','123-454-321'); 
--16.2 insert into samochod (id_samochod,kolor,marka,typ,poj_silnika,data_prod,przebieg) values (50,'SREBRNY','SKODA','OCTAVIA',1896,'2012-09-01',5000); 
--16.3 insert into pracownik (id_pracownik,imie,nazwisko,data_zatr,dzial,stanowisko,pensja,dodatek,telefon,id_miejsce) values (0,'ALOJZY','MIKOS','2010-08-11','ZAOPATRZENIE','MAGAZYNIER',3000,50,'501-501-501',1); 
--17.1 SELECT s.id_samochod, s.marka, s.typ, w.data_wyp, w.data_odd FROM samochod s INNER JOIN wypozyczenie w ON s.id_samochod=w.id_samochod WHERE w.data_odd IS NULL; 
--17.2 select k.imie, k.nazwisko,w.data_wyp, w.id_wypozyczenie from klient k inner join wypozyczenie w ON k.id_klient=w.id_klient where w.data_odd is null order by k.nazwisko,k.imie; 
--17.3 select w.kaucja, k.imie, k.nazwisko , w.data_wyp from klient k inner join wypozyczenie w ON k.id_klient=w.id_klient where w.kaucja is not null ; 
--18.1 SELECT k.imie, k.nazwisko, w.data_wyp, s.marka, s.typ FROM klient k INNER JOIN wypozyczenie w ON k.id_klient=w.id_klient INNER JOIN samochod s ON w.id_samochod=s.id_samochod ORDER BY k.nazwisko, k.imie, s.marka, s.typ; 
--18.2 select m.ulica, m.numer, s.marka, s.typ from miejsce m inner join wypozyczenie w on m.id_miejsce=w.id_miejsca_wyp inner join samochod s on w.id_samochod=s.id_samochod order by m.ulica, m.numer, s.marka, s.typ asc; 
--18.3 select k.imie, k.nazwisko, s.marka, s.typ, s.id_samochod from klient k inner join wypozyczenie w on k.id_klient=w.id_klient inner join samochod s on w.id_samochod=s.id_samochod order by s.id_samochod,k.imie,k.nazwisko; 
--19.1 select max(pensja) from pracownik; 
--19.2 select avg(pensja) from pracownik; 
--19.3 select min(data_prod) from samochod; 
--20.1 SELECT k.imie, k.nazwisko, COUNT(w.id_klient) AS ilosc_wypozyczen FROM klient k LEFT JOIN wypozyczenie w ON k.id_klient=w.id_klient GROUP BY k.imie, k.nazwisko,k.id_klient ORDER BY COUNT(w.id_klient) DESC; 
--20.2 select s.id_samochod, s.marka, s.typ, count(w.id_wypozyczenie) as ilosc_wypozyczen from samochod s left join wypozyczenie w on w.id_samochod=s.id_samochod group by s.id_samochod, s.marka, s.typ order by count(w.id_wypozyczenie); --20.3 select p.imie, p.nazwisko, COUNT(w.id_pracow_wyp) as ilosc_wypozyczen_samochodow from pracownik p left join wypozyczenie w on p.id_pracownik=w.id_pracow_wyp group by p.imie, p.nazwisko order by count(w.id_pracow_wyp) desc; 
--21.1 SELECT k.imie, k.nazwisko, COUNT(w.id_klient) AS ilosc_wypozyczen FROM klient k INNER JOIN wypozyczenie w ON k.id_klient=w.id_klient GROUP BY k.imie, k.nazwisko HAVING COUNT(w.id_klient)>=2 ORDER BY nazwisko ASC, imie ASC; 
--21.2 select s.id_samochod, s.marka, s.typ, COUNT(w.id_samochod) as ilosc_wypozyczen from samochod s inner join wypozyczenie w on s.id_samochod=w.id_samochod group by s.id_samochod, s.marka, s.typ having count(w.id_samochod)=2 order by s.marka, s.typ; 
--21.3 select p.imie, p.nazwisko, COUNT(w.id_pracow_wyp) as ilosc_wypozyczen_samochodow from pracownik p left join wypozyczenie w on p.id_pracownik=w.id_pracow_wyp group by p.imie, p.nazwisko having count(w.id_pracow_wyp)<=1 order by count(w.id_pracow_wyp), p.nazwisko, p.imie; 
--22.1 SELECT imie, nazwisko, pensja FROM pracownik WHERE pensja=(SELECT MAX(pensja) FROM pracownik); 
--22.2 select imie, nazwisko, pensja from pracownik where pensja>(select AVG(pensja) from pracownik); --22.3 select marka, typ, data_prod from samochod where data_prod=(select MIN(data_prod) from samochod); 
--23.1 SELECT marka, typ, data_prod FROM samochod WHERE id_samochod NOT IN (SELECT DISTINCT id_samochod FROM wypozyczenie); 
--23.2 select imie, nazwisko from klient where id_klient not in (select distinct id_klient from wypozyczenie); 
--23.3 select imie , nazwisko from pracownik where id_pracownik not in (select distinct id_pracow_wyp from wypozyczenie); 
--24.1 SELECT s.id_samochod, s.marka, s.typ FROM samochod s JOIN wypozyczenie w ON s.id_samochod=w.id_samochod GROUP BY s.id_samochod, s.marka, s.typ HAVING COUNT(w.id_samochod) SELECT TOP 1 COUNT(w.id_samochod) AS ilosc FROM wypozyczenie w GROUP BY w.id_samochod ORDER BY ilosc DESC ) ORDER BY s.marka ASC, s.typ ASC; 
--24.2 select k.id_klient, k.imie, k.nazwisko from klient k join wypozyczenie w on k.id_klient=w.id_klient group by k.id_klient, k.imie, k.nazwisko having COUNT(w.id_klient)=( select top 1 count(w.id_klient) as ilosc from wypozyczenie w group by w.id_klient order by ilosc ) order by k.nazwisko desc, k.imie desc; 
--24.3 select p.id_pracownik, p.nazwisko, p.imie from pracownik p join wypozyczenie w on p.id_pracownik=w.id_pracow_wyp group by p.id_pracownik, p.nazwisko, p.imie having COUNT(w.id_pracow_wyp)=( select top 1 COUNT(w.id_pracow_wyp) as ilosc from wypozyczenie w group by w.id_pracow_wyp order by ilosc ) order by p.nazwisko, p.imie; 
--25.1 UPDATE pracownik SET pensja=1.1*pensja WHERE pensja < (SELECT AVG(pensja) FROM pracownik); 
--25.2 update pracownik set dodatek=10+dodatek where id_pracownik in (select distinct id_pracow_wyp from wypozyczenie where MONTH(data_wyp)=5);
--25.3 update pracownik set pensja=0.95*pensja where id_pracownik not in (select distinct id_pracow_wyp from wypozyczenie where YEAR(data_wyp)=1999); 
--26.1 DELETE FROM klient WHERE id_klient NOT IN (SELECT DISTINCT id_klient FROM wypozyczenie); 
--26.2 delete from samochod where id_samochod not in (select distinct id_samochod from wypozyczenie); 
--26.3 delete from pracownik where id_pracownik not in (select distinct id_pracow_wyp from wypozyczenie); 
--27.1a SELECT imie, nazwisko FROM klient UNION SELECT imie, nazwisko FROM pracownik ORDER BY 2, 1; 
--27.1b SELECT imie, nazwisko FROM klient UNION ALL SELECT imie, nazwisko FROM pracownik ORDER BY 2, 1; 
--27.2 select imie, nazwisko from klient intersect select imie, nazwisko from pracownik; 
--27.3 select imie, nazwisko from klient except select imie, nazwisko from pracownik order by 2, 1


ZE SPRAWDZIANU GR 2;


Napisz instrukcje SQL (dla MS SQL Server) realizujące poniższe zadania. 
--C1-1 [3 pkt] --Znajdź klientów (id_klient, imie, nazwisko), którzy mają rabat --wyższy niż 2%, ale niższy niż 6%.
--Wynik posortuj leksykograficznie w/g nazwiska i imienia. --Rozwiązanie: 
SELECT id_klient, imie, nazwisko FROM klient WHERE rabat BETWEEN 2 AND 6 ORDER BY nazwisko ASC, imie ASC; 

--C1-2 [4 pkt] --Zwiększ o 20% pensję pracownikom, którzy pracują co najmniej 8 (pełnych) lat. --Rozwiązanie: 
UPDATE pracownik SET pensja=pensja+(pensja*0.2) Where data_zatr NOT BETWEEN '10-04-2006' AND '10-04-2014'

--C1-3 [4 pkt] --Usuń klientów, którzy nie złożyli żadnego zamówienia. 
--Rozwiązanie: SELECT * FROM klient k JOIN zamowienie z ON k.id_klient=z.id_zamowienie DELETE k.id_klient FROM k.klient WHERE z.data_zamowienia IS NULL; 

--C1-4 [4 pkt] --Dla każdego pracownika (nazwisko i imię), wyświetl informację ile przyjął on zamówień. 
--Uwzględnij też tych pracowników, którzy nie przyjęli żadnego zamówienia. 
--Wynik posortuj malejąco po ilości przyjętych zamówień, a dla takiej samej
--ilości zamówień leksykograficznie po nazwisku i imieniu. 
--Uwaga: dwóch pracowników może posiadać to samo imię i nazwisko. 

--Rozwiązanie: SELECT p.nazwisko, p.imie , COUNT(z.id_pracownik) as Ilosc
FROM pracownik p LEFT JOIN zamowienie z ON p.id_pracownik=z.id_pracownik
GROUP BY p.nazwisko, p.imie, z.id_pracownik
ORDER BY ilosc DESC, nazwisko ASC, imie ASC;

--C1-5 [5 pkt] --Znajdź nazwę kategorii (jednej lub kilku), w której znajduje się największa 
--liczba produktów.
--Proszę nie używać konstrukcji TOP 1 WITH TIES. 

Select k.nazwa, COUNT(p.id_kategoria)as ilosc from kategoria k JOIN podkategoria p ON k.id_kategoria=p.id_kategoria
JOIN produkt pr ON p.id_podkategoria=pr.id_podkategoria
GROUP BY k.nazwa ORDER BY ilosc DESC;
