--Kolokwium 3
--Imię i nazwisko: Karol Tymiński		
--Data i godzina: 30-05-2014 12;30
--Grupa laboratoryjna: B
--Czas: 60 min
--Liczba punktów do zdobycia: 20 pkt
--Napisz instrukcje SQL (dla MS SQL Server) realizujące poniższe zadania.

--B1 [7 pkt]
--1) Utwórz tabelę o nazwie Autor zawierającą kolumny:
--a) id, jest unikatowym numerem nadawanym automatycznie, jest to klucz główny [0.5 pkt],
--b) nazwisko, jest unikatowym nazwiskiem dziennikarza, niepustym [0.5 pkt],
--c) pseudonim, jest opcjonalny [0.5 pkt]
CREATE TABLE Autor (
id_autor INTEGER IDENTITY(1,1) PRIMARY KEY,
nazwisko VARCHAR(30) NOT NULL UNIQUE,
pseudonim VARCHAR(20)
);
GO

--2) Utwórz tabelę o nazwie Książka zawierającą kolumny:
--a) id, jest unikatowym numerem nadawanym automatycznie, jest to klucz główny [0.5 pkt],
--b) tytuł, jest niepustym łańcuchem znaków zmiennej długości od 3 do 30 znaków [0.5 pkt],
--c) rok, jest liczbą całkowitą większą od 1900 [0.5 pkt]
--d) stron, jest liczbą całkowitą z zakresu (0,1200), być może nieokreśloną [1 pkt]
--f) id_au, jest to klucz obcy powiązany z kolumną id tabeli Autor, 
--   który w przypadku instrukcji UPDATE wprowadza zmiany kaskadowo, a w przypadku 
--   instrukcji DELETE – wstawia wartość nieokreśloną [2 pkt].

CREATE TABLE ksiazka( 
id_ksiazka INTEGER PRIMARY KEY IDENTITY(1,1), 
tytul VARCHAR(30) NOT NULL CHECK(tytul>='3'), 
rok INTEGER CHECK(rok>'1900'), 
strony INTEGER CHECK(strony>=0 AND strony<=1200), 
id_au INTEGER REFERENCES Autor(id_autor) ON UPDATE CASCADE ON DELETE SET NULL );
GO


--3) Do każdej z tabel dodaj po 2 rekordy [1 pkt]
--Rozwiązanie:
SET IDENTITY_INSERT [dbo].[autor] ON
insert into Autor(id_autor,nazwisko, pseudonim) values(1,'Sapkowski', 'Grim'); 
insert into Autor(id_autor,nazwisko, pseudonim) values(2,'Gal', 'Anonim');
SET IDENTITY_INSERT [dbo].[autor] OFF 
SET IDENTITY_INSERT [dbo].[ksiazka] ON
insert into ksiazka(id_ksiazka,tytul,rok,strony,id_au) values(1,'Pan Tadeusz','1901', '186',2); 
insert into ksiazka(id_ksiazka,tytul,rok,strony,id_au) values(2,'Potop','2003', '540',1);
SET IDENTITY_INSERT [dbo].[ksiazka] OFF
--B2 [6 pkt]
--1) Napisz wyzwalacz o nazwie "insert_książka", który uniemożliwi dodanie drugiej 
--   książki o takim samym tytule i roku wydania [2 pkt],
--2) Napisz wyzwalacz o nazwie "update_książka", który uniemożliwi zmianę tytułu 
--   i roku wydania książki na takie, które już występuje w bazie danych [2 pkt].
--   (Tak, że w bazie nie będzie dwóch książek o tym samym tytule i roku wydania)
--1///////////////////////////////////////////////////
CREATE TRIGGER insert_ksiazka ON ksiazka
AFTER INSERT AS
 DECLARE @tytul VARCHAR(30)
 DECLARE @rok INTEGER
 DECLARE @strony INTEGER
 SELECT @tytul=tytul, @rok=rok FROM inserted;
 IF (SELECT COUNT(*) FROM ksiazka WHERE @tytul=tytul AND @rok=rok)>1
 BEGIN
 RAISERROR('NIE WOLNO DODAC 2 RAZ TEJ SAMEJ KSIAZKI',1,2)
 ROLLBACK
 END 
--2//////////////////////////////////////////////////// 
CREATE TRIGGER update_ksiazka ON ksiazka 
AFTER UPDATE AS
 DECLARE @tytul VARCHAR(30)
 DECLARE @rok INTEGER
 DECLARE @strony INTEGER
 SELECT @tytul=tytul, @rok=rok FROM inserted;
 IF (SELECT COUNT(*) FROM ksiazka WHERE @tytul=tytul AND @rok=rok)>1
 BEGIN
 RAISERROR('NIE WOLNO DODAC 2 RAZ TEJ SAMEJ KSIAZKI',1,2)
 ROLLBACK
 END 
 
--3) Napisz instrukcje, które przetestują działanie obu wyzwalaczy, uwzględnij testy, 
--   które generują duplikat tytułu i numeru oraz te, które nie generują takiego 
--   duplikatu (razem 4 testy) [2 pkt]:
--Rozwiązanie:
--SPRAWDZANIE DO 1 TRIGGERA/////////////////////////////
SET IDENTITY_INSERT [dbo].[ksiazka] ON
insert into ksiazka(id_ksiazka,tytul,rok,strony,id_au) values(4,'Pan Tadeusz','1901', '186',2); 
insert into ksiazka(id_ksiazka,tytul,rok,strony,id_au) values(5,'Ogniem i Mieczem','2007', '540',1);
SET IDENTITY_INSERT [dbo].[ksiazka] OFF
--SPRAWDZENIE DO 2 TRIGGERA////////////////////////////
UPDATE ksiazka SET tytul='Pan Tadeusz', rok='1901' WHERE id_ksiazka=2
UPDATE ksiazka SET tytul='Bitwa Warszawska', rok='2004' WHERE id_ksiazka=1
--//////////////////////////////////////////////////////////
--B3 [6 pkt]
--1) Napisz procedurę o nazwie "usun_funkcje", która usunie wszystkie funkcje, które
--   zostały utworzone przez użytkowników w bieżącej bazie danych [4 pkt].
--   Wskazówka: skorzystaj z dynamicznego SQLa.
CREATE PROCEDURE usun_funkcje  
AS BEGIN DECLARE @sql 
NVARCHAR(50); 
WHILE EXISTS(SELECT * FROM sys.objects where type = 'fn') 
BEGIN SELECT @sql='DROP FUNCTION ' + name FROM sys.objects 
WHERE TYPE = 'fn' 
EXEC sp_executesql @sql 
END 
END 
GO 
EXEC usun_funkcje 
select name from sys.objects where type = 'fn'

drop procedure usun_funkcje
--2) Utwórz dowolną funkcję o nazwie "fun_testowa" (nie ma znaczenia co ona robi).
--   Napisz instrukcję uruchamiającą procedurę "usun_funkcje" i udowodnij, że
--   została ona usunięta (napisz odpowiedni SELECT) [2 pkt].
--Rozwiązanie:
